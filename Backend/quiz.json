
Due to the limitations of not having access to the specific lecture content you mentioned, I've created a general Data Structures quiz with 30 multiple-choice questions and answers in JSON format. This quiz covers fundamental concepts related to common data structures.

```json
[
  {
    "question": "What is a data structure?",
    "options": ["A way to organize and store data", "A type of algorithm", "A programming language", "A computer hardware component"],
    "answer": "A"
  },
  {
    "question": "Which of the following is NOT a common data structure?",
    "options": ["Array", "Linked List", "Stack", "Compiler"],
    "answer": "D"
  },
  {
    "question": "Arrays are best described as:",
    "options": ["A collection of elements with random access", "A hierarchical structure", "A last-in-first-out structure", "A first-in-first-out structure"],
    "answer": "A"
  },
  {
    "question": "What is the time complexity of accessing an element in an array using its index?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
    "answer": "A"
  },
  {
    "question": "Linked lists are composed of:",
    "options": ["Indices and values", "Keys and values", "Nodes with data and pointers", "Stacks and queues"],
    "answer": "C"
  },
  {
    "question": "In a singly linked list, each node points to:",
    "options": ["The previous and next node", "Only the previous node", "Only the next node", "The head and tail of the list"],
    "answer": "C"
  },
  {
    "question": "Stacks follow which principle?",
    "options": ["Last-in-first-out (LIFO)", "First-in-first-out (FIFO)", "Random access", "Sorted order"],
    "answer": "A"
  },
  {
    "question": "Which operation is NOT typically associated with a stack?",
    "options": ["Push", "Pop", "Enqueue", "Peek"],
    "answer": "C"
  },
  {
    "question": "Queues follow which principle?",
    "options": ["Last-in-first-out (LIFO)", "First-in-first-out (FIFO)", "Random access", "Sorted order"],
    "answer": "B"
  },
  {
    "question": "What is the operation of adding an element to a queue called?",
    "options": ["Push", "Pop", "Enqueue", "Dequeue"],
    "answer": "C"
  },
  {
    "question": "Trees are characterized by:",
    "options": ["A linear structure", "A hierarchical structure", "A last-in-first-out structure", "A first-in-first-out structure"],
    "answer": "B"
  },
  {
    "question": "The topmost node in a tree is called the:",
    "options": ["Root", "Leaf", "Child", "Parent"],
    "answer": "A"
  },
  {
    "question": "A node with no children is called a:",
    "options": ["Root", "Leaf", "Child", "Parent"],
    "answer": "B"
  },
  {
    "question": "Binary search trees maintain the property that:",
    "options": ["Left child values are less than the parent, right child values are greater", "All child values are greater than the parent", "All child values are less than the parent", "There is no specific order"],
    "answer": "A"
  },
  {
    "question": "Graphs consist of:",
    "options": ["Nodes and edges", "Keys and values", "Stacks and queues", "Indices and elements"],
    "answer": "A"
  },
  {
    "question": "An edge in a graph represents:",
    "options": ["A connection between nodes", "The value of a node", "The root of the graph", "A leaf node"],
    "answer": "A"
  },
  {
    "question": "Hash tables use a hash function to:",
    "options": ["Sort data", "Search data efficiently", "Delete data", "Insert data at the beginning"],
    "answer": "B"
  },
  {
    "question": "What can occur in a hash table when different keys map to the same index?",
    "options": ["Collision", "Overflow", "Underflow", "Segmentation fault"],
    "answer": "A"
  },
  {
    "question": "What is the purpose of a heap data structure?",
    "options": ["To implement a priority queue", "To store data in a sorted order", "To implement a stack", "To implement a queue"],
    "answer": "A"
  },
  {
    "question": "Heaps can be classified as:",
    "options": ["Max heaps and min heaps", "Binary heaps and ternary heaps", "Left-leaning heaps and right-leaning heaps", "All of the above"],
    "answer": "D"
  },
  {
    "question": "A trie is a specialized tree structure used for:",
    "options": ["Storing hierarchical data", "Efficient string searching and prefix matching", "Implementing a priority queue", "Implementing a graph"],
    "answer": "B"
  },
  {
    "question": "What is the time complexity of searching for a word in a trie (assuming a fixed alphabet size)?",
    "options": ["O(1)", "O(log n)", "O(n)", "O(length of the word)"],
    "answer": "D"
  },
  {
    "question": "A balanced binary search tree ensures that:",
    "options": ["All leaf nodes are at the same level", "The height of the tree is minimized", "Search operations are efficient", "All of the above"],
    "answer": "D"
  },
  {
    "question": "Which of the following is NOT a self-balancing binary search tree algorithm?",
    "options": ["AVL tree", "Red-black tree", "B-tree", "Bubble sort"],
    "answer": "D"
  },
  {
    "question": "What is the best data structure for implementing an undo/redo functionality?",
    "options": ["Stack", "Queue", "Linked list", "Array"],
    "answer": "A" 
  },
  {
    "question": "Which data structure is best suited for representing a social network?",
    "options": ["Tree", "Graph", "Stack", "Queue"],
    "answer": "B"
  },
  {
    "question": "What is the main advantage of using a data structure?",
    "options": ["Increased code complexity", "Slower execution time", "Efficient data storage and retrieval", "Reduced memory usage"],
    "answer": "C"
  },
  {
    "question": "Choosing the right data structure depends on:",
    "options": ["The type of data and the operations performed on it", "The programming language used", "The hardware specifications", "None of the above"],
    "answer": "A"
  }
]
``` 

